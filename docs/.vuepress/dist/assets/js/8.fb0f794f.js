(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{360:function(t,i,v){"use strict";v.r(i);var _=v(42),l=Object(_.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"git-学习"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-学习"}},[t._v("#")]),t._v(" git 学习")]),t._v(" "),v("h3",{attrs:{id:"常用命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),v("ol",[v("li",[t._v("cd d: 进入文件夹")]),t._v(" "),v("li",[t._v("cd .. 返回上一层目录")]),t._v(" "),v("li",[t._v("mkdir 创建目录")]),t._v(" "),v("li",[t._v("pwd 显示当前工作目录的全路径")]),t._v(" "),v("li",[t._v("touch xx 新建 xx 文件")]),t._v(" "),v("li",[t._v("vi xx 编辑 xx 文件，按 i 切换到编辑模式，按 esc 切换到命令模式，输入冒号:wq 回车，保存并返回")]),t._v(" "),v("li",[t._v("rm 删除文件")]),t._v(" "),v("li",[t._v("ls 查看当前目录所有文件")]),t._v(" "),v("li",[t._v("clear 清屏")])]),t._v(" "),v("h3",{attrs:{id:"第一次需要进行的操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第一次需要进行的操作"}},[t._v("#")]),t._v(" 第一次需要进行的操作")]),t._v(" "),v("ol",[v("li",[t._v('配置用户名：git config --global user.name "你的 git 名称"')]),t._v(" "),v("li",[t._v('配置用户邮箱：git config --global user.email "你的 git 验证邮箱"')]),t._v(" "),v("li",[t._v("查看你的配置信息：git config --list")]),t._v(" "),v("li",[t._v("git remote add origin https://github.com/Sww-echo/liusang.git 本地仓库和远程仓库关联")]),t._v(" "),v("li",[t._v("git remote -v 查看本地仓库与远程仓库关联状态")]),t._v(" "),v("li",[t._v("git init 初始化版本库")]),t._v(" "),v("li",[t._v("git add . 将所有改动（新增，修改，删除）提交到暂存区")]),t._v(" "),v("li",[t._v("git commit -m '这里是提交注释' 将暂存区提交到本地仓库")]),t._v(" "),v("li",[t._v("git push -u origin master（第一次推送）之后推送直接 git push")])]),t._v(" "),v("h3",{attrs:{id:"全局配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全局配置"}},[t._v("#")]),t._v(" 全局配置")]),t._v(" "),v("ol",[v("li",[t._v('配置用户名：git config --global user.name "你的 git 名称"')]),t._v(" "),v("li",[t._v('配置用户邮箱：git config --global user.email "你的 git 验证邮箱"')]),t._v(" "),v("li",[t._v("一台电脑配置一次就可以了")]),t._v(" "),v("li",[t._v("查看你的配置信息：git config --list")])]),t._v(" "),v("h3",{attrs:{id:"文件夹作为工作区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件夹作为工作区"}},[t._v("#")]),t._v(" 文件夹作为工作区")]),t._v(" "),v("ol",[v("li",[t._v("git init 初始化版本库")]),t._v(" "),v("li",[t._v("git add . 将所有改动（新增，修改，删除）提交到暂存区")]),t._v(" "),v("li",[t._v("git commit -m '这里是提交注释' 将暂存区提交到本地仓库")])]),t._v(" "),v("h3",{attrs:{id:"辅助命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#辅助命令"}},[t._v("#")]),t._v(" 辅助命令")]),t._v(" "),v("ol",[v("li",[t._v("git status 查看当前目录的操作状态")]),t._v(" "),v("li",[t._v("git reflog 查看简易版日志")]),t._v(" "),v("li",[t._v("git log 查看日志")])]),t._v(" "),v("h3",{attrs:{id:"版本回退"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),v("ol",[v("li",[t._v("git reset --hard HEAD^ 退回到上一个版本")]),t._v(" "),v("li",[t._v("git reset --hard 1818181 退回到置顶版本")])]),t._v(" "),v("h3",{attrs:{id:"将本地仓库提交到远程仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#将本地仓库提交到远程仓库"}},[t._v("#")]),t._v(" 将本地仓库提交到远程仓库")]),t._v(" "),v("ol",[v("li",[t._v("git remote add origin https://github.com/Sww-echo/liusang.git 本地仓库和远程仓库关联")]),t._v(" "),v("li",[t._v("git remote -v 查看本地仓库与远程仓库关联状态")]),t._v(" "),v("li",[t._v("git push -u origin master（第一次推送）\nget push 把本地仓库推送到远程仓库\n-u origin master 设置默认提交主分支 master 到 origin（设置一次，下次直接 Git push 就行）")]),t._v(" "),v("li",[t._v("git push origin 分支名 提交到其他分支")]),t._v(" "),v("li",[t._v("git push -u -f origin master 强制推送到远程，不推荐！！")])]),t._v(" "),v("h3",{attrs:{id:"下载项目到本地"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#下载项目到本地"}},[t._v("#")]),t._v(" 下载项目到本地")]),t._v(" "),v("ol",[v("li",[t._v("git clone 适用于本地没项目，直接从远程克隆到本地（整个版本库克隆下来）")]),t._v(" "),v("li",[t._v("git pull 本地没有，直接从远程更新到本地会自动合并")]),t._v(" "),v("li",[t._v("git fetch 更新到本地，不会自动合并")]),t._v(" "),v("li",[t._v("git merge FETCH_HEAD 合并分支")]),t._v(" "),v("li",[v("img",{attrs:{src:"C:%5CUsers%5C25609%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201117092704685.png",alt:"image-20201117092704685"}})]),t._v(" "),v("li",[t._v("一定要先把工作区的修改提交到本地仓库再更新远程到本地")]),t._v(" "),v("li",[t._v("如果本地有该项目，应该直接更新到本地：git pull")])]),t._v(" "),v("h3",{attrs:{id:"分支操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),v("ol",[v("li",[t._v("git branch 查看本地所有分支（git branch -r 查看远程分支）")]),t._v(" "),v("li",[t._v("git branch test 创建 test 分支（test 为分支名）")]),t._v(" "),v("li",[t._v("git checkout test 切换到 test 分支")]),t._v(" "),v("li",[t._v("未提交到本地仓库切换不了分支，切换分支后，工作区的代码会自动切换到对应分支的代码")]),t._v(" "),v("li",[t._v("git merge test 把 test 分支合并到当前分支")]),t._v(" "),v("li",[t._v("git branch -d test 删除 test 分支")]),t._v(" "),v("li",[t._v("git pull origin test 更新代码到本地，会自动合并到当前分支")]),t._v(" "),v("li",[t._v("git fetch origin test 更新代码到本地，不会合并到当前分支")]),t._v(" "),v("li",[t._v("git merge FETCH_HEAD 把 FETCH_HEAD 合并到当前分支")])]),t._v(" "),v("h3",{attrs:{id:"git-忽略列表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-忽略列表"}},[t._v("#")]),t._v(" git 忽略列表")]),t._v(" "),v("ol",[v("li",[t._v("新建.gitignore 文件，列出不需要提交到版本库的文件及目录（必须将.gitignore 文件忽略）")])]),t._v(" "),v("h4",{attrs:{id:"项目版本管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#项目版本管理"}},[t._v("#")]),t._v(" 项目版本管理")]),t._v(" "),v("ul",[v("li",[t._v("第一次下载项目版本（从远程 github 仓库分支到本地仓库分支）")])]),t._v(" "),v("blockquote",[v("p",[t._v("git clone github 上新创建的项目 https 标识（路径）")])]),t._v(" "),v("ul",[v("li",[t._v("第一次发布项目版本（从本地仓库分支到远程 github 仓库分支）")])]),t._v(" "),v("blockquote",[v("ol",[v("li",[t._v("git add .")]),t._v(" "),v("li",[t._v('git commit -m"提交日志说明"')]),t._v(" "),v("li",[t._v("git push -u origin master")])])]),t._v(" "),v("ul",[v("li",[t._v("后续提交版本（从本地仓库分支到远程 github 仓库分支）")])]),t._v(" "),v("blockquote",[v("p",[t._v("git push origin master （与第一次发布的操作相比只是少了一个-u）")])]),t._v(" "),v("ul",[v("li",[t._v("后续更新 版本 （从远程 github 仓库分支到本地仓库分支）")])]),t._v(" "),v("blockquote",[v("p",[t._v("git pull")])]),t._v(" "),v("p",[t._v("【注：】后续每一次提交新版本之前，要遵循先更新，后上传的原则，目的是为了避免出现版本冲突的问题，即：")]),t._v(" "),v("blockquote",[v("p",[t._v("git pull")]),t._v(" "),v("p",[t._v("git push origin master")]),t._v(" "),v("p",[t._v("以上操作是没有冲突的情况下的操作，如果 git pull 更新后,很有可能出现版本冲突，处理好冲突后，再作如下处理：")]),t._v(" "),v("ol",[v("li",[t._v("git add .")]),t._v(" "),v("li",[t._v('git commit -m"处理了冲突"')]),t._v(" "),v("li",[t._v("git push origin master")])])])])}),[],!1,null,null,null);i.default=l.exports}}]);